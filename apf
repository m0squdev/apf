#!/bin/bash

log() {
    printf "\x1b[1m[$program_name]\x1b[0m $1"
}
error() {
    log "\x1b[1m\x1b[31mError:\x1b[37m\x1b[0m $1"
}

check_exit_code() {
    exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        printf "\n"
        error "previous command exited with non-zero code $exit_code\n"
        log "Continue transaction? (y/N) "
        read choice
        if [[ "$choice" != "y" && "$choice" != "Y" ]]; then
            exit 2
        fi
    fi
}

if [ -n "$APF_REINSTALL" ]; then
    reinstall=true
    flatpak_install_args+=" --reinstall"
fi
if [ -z "$APF_FUZZY_SEARCH" ]; then
    fzf_args="--exact"
fi
if [ -n "$APF_REMOVE_DEPENDENCIES" ]; then
    aur_remove_args="--recursive"
fi
if [ -n "$APF_FLATPAK_USER" ]; then
    flatpak_level="user"
else
    flatpak_level="system"
fi
if [ -n "$APF_NO_CONFIRMATION" ]; then
    aur_install_args="--noconfirm"
    flatpak_install_args+=" --assumeyes"
fi

program_name="$(basename "$0")"
help="Usage: $program_name [OPTIONS] [INITIAL QUERY]

OPTIONS:
    -a, --reinstall       Reinstall already installed packages instead of deleting them. Corresponding environment variable: APF_REINSTALL
    -f, --fuzzy           Enable fuzzy search. Corresponding environment variable: APF_FUZZY_SEARCH
    -h, --help            Print this message and exit
    -i, --installed       Only show installed packages
    -r, --recursive       Recursively remove unused and not explicitely installed dependencies of AUR packages to remove. Corresponding environment variable: APF_REMOVE_DEPENDENCIES
    -s, --flatpak-system  Install Flatpak packages system-wide. Default option, only to be used when overwritten by the environment variable APF_FLATPAK_USER
    -u, --flatpak-user    Install Flatpak packages user-wide instead of system-wide. Corresponding environment variable: APF_FLATPAK_USER
    -y, --yes             Don't prompt for confirmation when installing packages. You will still be prompted when removing packages. Corresponding environment variable: APF_NO_CONFIRMATION

INITIAL QUERY:
    Specify this parameter to start fzf with an initial search query.

In the fzf TUI:
    Press Tab to select multiple packages and press Enter to confirm your selection. Already installed packages will be removed and new packages will be installed.
    Press Ctrl-R to reload package list."

while [[ $# -gt 0 ]]; do
    case "$1" in
        -a | --reinstall)
            reinstall=true
            flatpak_install_args+=" --reinstall"
            ;;
    	-f | --fuzzy) fzf_args="" ;;
        -h | --help)
            printf "$help\n"
            exit 0
            ;;
        -i | --installed) filter_installed=true ;;
        -r | --recursive) aur_remove_args="--recursive" ;;
        -s | --system) flatpak_level="system" ;;
        -u | --user) flatpak_level="user" ;;
        -y | --yes)
            aur_install_args="--noconfirm"
            flatpak_install_args+=" --assumeyes"
            ;;
        -*)
            printf "$program_name: invalid flag '$1'\n$help\n"
            exit 1
            ;;
        *) initial_query+=("$1") ;;
    esac
    shift
done

installed_aur_packages="$(mktemp)"
aur_repos="$(mktemp)"
installed_flatpak_packages="$(mktemp)"
flatpak_remotes="$(mktemp)"

choices=$(fzf $fzf_args --multi --no-sort --reverse --query "${initial_query[*]}" --preview 'bash -c '\''
    get_repo_or_remote_color() {
        case "$1" in
            aur) color="34" ;;
            core) color="33" ;;
            extra) color="32" ;;
            flathub) color="35" ;;
            flathub-beta) color="31" ;;
            multilib) color="36" ;;
            *) color="37" ;;
        esac
        printf "\x1b[${color}m"
    }

    choice="{1}"
    repo_or_remote="${choice%%/*}"
    package_or_id="${choice#*/}"
    printf "\x1b[1m$(get_repo_or_remote_color "$repo_or_remote")$repo_or_remote\x1b[37m\x1b[0m/\x1b[1m$package_or_id"
    if grep -q "^$repo_or_remote$" "'"$aur_repos"'"; then
        if grep -q "^$package_or_id$" "'"$installed_aur_packages"'"; then
            printf " \x1b[32m(Installed)\x1b[37m\x1b[0m\n    Package already installed. Select to "
            if [ -n "'"$reinstall"'" ]; then
                printf "reinstall"
            else
                printf "remove"
            fi
        else
            printf "\x1b[0m\n    Package not installed. Select to install"
        fi
        printf ".\n\n"
        yay -Si "$package_or_id"
    elif grep -q "^$repo_or_remote$" "'"$flatpak_remotes"'"; then
        if grep -q "^$repo_or_remote/$package_or_id$" "'"$installed_flatpak_packages"'"; then
            printf " \x1b[32m(Installed)\x1b[37m\x1b[0m \n    Package already installed. Select to "
            if [ -n "'"$reinstall"'" ]; then
                printf "reinstall"
            else
                printf "remove"
            fi
        else
            printf "\x1b[0m \n    Package not installed. Select to install"
        fi
        printf ".\n"
        flatpak remote-info --'$flatpak_level' "$repo_or_remote" "$package_or_id"
        printf "\n"
    else
        echo "\x1b[31mError: source of package $choice is neither a repo nor a Flatpak remote!\x1b[37m"
    fi
    printf "Currently selected packages:"
    cat "{+f}" | while read -r selected_choice; do
        selected_full_package_name="${selected_choice%% *}"
        repo_or_remote="${selected_full_package_name%%/*}"
        package_or_id="${selected_full_package_name#*/}"
        printf "\n    \x1b[1m$(get_repo_or_remote_color "$repo_or_remote")$repo_or_remote\x1b[37m\x1b[0m/\x1b[1m$package_or_id\x1b[0m (to "
        if { grep -q "^$repo_or_remote$" "'"$aur_repos"'" && grep -q "^$package_or_id$" "'"$installed_aur_packages"'"; } || \
            { grep -q "^$repo_or_remote$" "'"$flatpak_remotes"'" && grep -q "^$repo_or_remote/$package_or_id$" "'"$installed_flatpak_packages"'"; }; then
            if [ -n "'"$reinstall"'" ]; then
                printf "reinstall"
            else
                printf "\x1b[1m\x1b[31mremove\x1b[37m\x1b[0m"
            fi
        else
            printf "install"
        fi
        printf ")"
        if grep -q "^$repo_or_remote$" "'"$aur_repos"'"; then
            if [ -z "'"$reinstall"'" ] && grep -q "^$package_or_id$" "'"$installed_aur_packages"'" && [[ "'"$aur_remove_args"'" == *"--recursive"* ]]; then
                printf " (also remove unused dependencies)"
            fi
        elif grep -q "^$repo_or_remote$" "'"$flatpak_remotes"'"; then
            printf " "
        fi
    done
'\''' --bind 'start,ctrl-r:reload(bash -c '\''
    yay -Qq > "'"$installed_aur_packages"'"
    unformatted_aur_packages="$(yay -Pc)"
    echo "$unformatted_aur_packages" | awk "{print tolower(\$2)}" | sort -u > "'"$aur_repos"'"
    aur_packages="$(awk "NR==FNR {allowed[\$0]; next} {printf tolower(\$2) \"/\" \$1; if (\$1 in allowed) printf \" (*)\"; print \"\"}" "'"$installed_aur_packages"'" <(echo "$unformatted_aur_packages"))"
    if [ -n "'"$filter_installed"'" ]; then
        aur_packages="$(echo "$aur_packages" | grep " (\*)")"
    fi
    echo "$aur_packages" | grep -v "^aur/"
    echo "$(flatpak list --columns=application,origin)" | awk "{print \$2 \"/\" \$1}" > "'"$installed_flatpak_packages"'"
    flatpak remotes --columns=name > "'"$flatpak_remotes"'"
    flatpak_packages="$(awk "NR==FNR {allowed[\$0]; next} !seen[\$2 \"/\" \$1]++ {key = \$2 \"/\" \$1; printf key; if (key in allowed) printf \" (*)\"; print \" \"}" "'"$installed_flatpak_packages"'" <(flatpak remote-ls --app --columns=application,origin))"
    if [ -n "'"$filter_installed"'" ]; then
        flatpak_packages="$(echo "$flatpak_packages" | grep " (\*)")"
    fi
    echo "$flatpak_packages"
    echo "$aur_packages" | grep "^aur/"
'\'')')
if [ -n "$choices" ]; then
    declare -A flatpak_packages_to_install
    while read -r choice; do
        full_package_name="${choice%% *}"
        repo_or_remote="${full_package_name%%/*}"
        package_or_id="${full_package_name#*/}"
        if grep -q "^$repo_or_remote$" "$aur_repos"; then
            if [ -z "$reinstall" ] && grep -q "^$package_or_id$" "$installed_aur_packages"; then
                aur_packages_to_remove+="$package_or_id "
            else
                aur_packages_to_install+="$package_or_id "
            fi
        elif grep -q "^$repo_or_remote$" "$flatpak_remotes"; then
            if [ -z "$reinstall" ] && grep -q "^$repo_or_remote/$package_or_id$" "$installed_flatpak_packages"; then
                flatpak_packages_to_remove+="$package_or_id "
            else
                flatpak_packages_to_install["$repo_or_remote"]+="$package_or_id "
            fi
        else
            error "source of package $full_package_name is neither a repo nor a Flatpak remote!\n"
        fi
    done <<< "$choices"
    if [ -n "$aur_packages_to_remove" ]; then
        printf "\n"
        log "Official and AUR packages to \x1b[1m\x1b[31mremove\x1b[37m\x1b[0m"
        if [[ "'"$aur_remove_args"'" == *"--recursive"* ]]; then
            printf " (also remove unused dependencies)"
        fi
        printf ": \x1b[1m$aur_packages_to_remove\x1b[0m\n"
        yay -R $aur_remove_args ${aur_packages_to_remove::-1}
        check_exit_code
    fi
    if [ -n "$aur_packages_to_install" ]; then
        printf "\n"
        log "Official and AUR packages to install: $aur_packages_to_install\n"
        yay -S $aur_install_args ${aur_packages_to_install::-1}
        check_exit_code
    fi
    if [ -n "$flatpak_packages_to_remove" ]; then
        printf "\n"
        log "Flatpak packages to \x1b[1m\x1b[31mremove\x1b[37m\x1b[0m ($flatpak_level-wide): \x1b[1m$flatpak_packages_to_remove\x1b[0m\n"
        flatpak uninstall --$flatpak_level ${flatpak_packages_to_remove::-1}
        check_exit_code
    fi
    for remote in "${!flatpak_packages_to_install[@]}"; do
        if [[ -n "${flatpak_packages_to_install["$remote"]}" ]]; then
            packages="${flatpak_packages_to_install["$remote"]::-1}"
            printf "\n"
            log "Flatpak packages to install from remote $remote ($flatpak_level-wide): $packages\n"
            flatpak install $flatpak_install_args --$flatpak_level "$remote" $packages
            check_exit_code
        fi
    done
fi

rm "$installed_aur_packages" "$aur_repos" "$installed_flatpak_packages" "$flatpak_remotes"
printf "\x1b[0m"